---
description: 
globs: 
alwaysApply: false
---
### Edio ‚Äì YouTuber‚ÄìEditor Collaboration Platform

---

## üîß Tech Stack Overview

- **Backend Platform:** Supabase (Postgres + Auth + Edge Functions)
- **File Storage:** Amazon S3 (w/ Pre-signed URLs)
- **Authentication:** Supabase OAuth (Google only)
- **API Layer:** Next.js (App Router API routes or Edge Functions)
- **Real-time:** Supabase Realtime (optional, for chat updates)
- **Notifications:** DB-triggered in-app alerts (Push/email optional later)

---

## üóÇÔ∏è Database Schema (Postgres via Supabase)

### üë§ `users`

Stores YouTuber & Editor details.

| Column | Type | Notes |
| --- | --- | --- |
| id | UUID (PK) | Supabase Auth user ID |
| name | TEXT | Display name |
| email | TEXT | Unique |
| role | TEXT | `youtuber` or `editor` |
| created_at | TIMESTAMP | Default now() |

---

### üì¶ `projects`

Represents a video editing project.

| Column | Type | Notes |
| --- | --- | --- |
| id | UUID (PK) |  |
| owner_id | UUID (FK) | `users.id`, YouTuber owner |
| project_title | TEXT | Internal project name |
| video_title | TEXT | Final YouTube video title |
| description | TEXT | Final YouTube description |
| thumbnail_url | TEXT | Current active thumbnail |
| status | TEXT | `pending`, `approved`, etc. |
| created_at | TIMESTAMP | Default now() |
| updated_at | TIMESTAMP | Auto-updated on change |

---

### üéÆ `video_versions`

Each edited version of a video.

| Column | Type | Notes |
| --- | --- | --- |
| id | UUID (PK) |  |
| project_id | UUID (FK) | References `projects.id` |
| uploader_id | UUID (FK) | References `users.id` |
| version_number | INT | Auto-increment per project |
| file_url | TEXT | S3 upload link |
| preview_url | TEXT | Pre-signed URL (if needed) |
| notes | TEXT | Optional version notes |
| created_at | TIMESTAMP | Default now() |

---

### üñºÔ∏è `uploads`

Tracks all file uploads (thumbnails, raw videos, etc.)

| Column | Type | Notes |
| --- | --- | --- |
| id | UUID (PK) |  |
| project_id | UUID (FK) | References `projects.id` |
| user_id | UUID (FK) | Uploader |
| file_url | TEXT | S3 URL |
| file_type | TEXT | `video`, `thumbnail`, etc. |
| file_name | TEXT | Original filename |
| file_size | BIGINT | Size in bytes |
| created_at | TIMESTAMP | Default now() |

---

### üí¨ `messages`

Chat messages per project.

| Column | Type | Notes |
| --- | --- | --- |
| id | UUID (PK) |  |
| project_id | UUID (FK) | References `projects.id` |
| sender_id | UUID (FK) | `users.id` |
| content | TEXT | Message content |
| type | TEXT | `text`, `system`, `feedback` |
| created_at | TIMESTAMP |  |

---

### üîó `project_editors`

Mapping of editors to projects.

| Column | Type | Notes |
| --- | --- | --- |
| id | UUID (PK) |  |
| project_id | UUID (FK) | References `projects.id` |
| editor_id | UUID (FK) | References `users.id` |
| created_at | TIMESTAMP | Default now() |

Currently, one editor per project is allowed ‚Äî this model supports multiple editors in the future.

---


### ‚úâÔ∏è `editor_invites`

Tracks invitations between creators (YouTubers) and editors ‚Äî independent of projects.

| Column | Type | Notes |
| --- | --- | --- |
| id | UUID (PK) |  |
| creator_id | UUID (FK) | References `users.id` (the YouTuber who sends the invite) |
| editor_id | UUID (FK) | References `users.id` ‚Äî nullable until the invite is accepted |
| editor_email | TEXT | Email address the invitation was sent to |
| status | TEXT | `pending`, `accepted`, `declined`, `revoked` |
| created_at | TIMESTAMP | Default `now()` |
| accepted_at | TIMESTAMP | Nullable ‚Äî set when the invite is accepted |

---

### üîî `notifications`

In-app notification system.

| Column | Type | Notes |
| --- | --- | --- |
| id | UUID (PK) |  |
| user_id | UUID (FK) | Who gets notified |
| message | TEXT | Display message |
| type | TEXT | `info`, `action`, etc. |
| read | BOOLEAN | Has the user seen it? |
| project_id | UUID (FK) | Optional reference to project |
| created_at | TIMESTAMP | Default now() |

---

## üîê Auth Strategy

- ‚úÖ **Supabase OAuth (Google only)**
- ‚ùå No email/password
- üß† Use Supabase's `user_metadata` to distinguish `youtuber` and `editor` roles
- üéØ New users select role on first login

---

## üîí Row-Level Security (RLS)

RLS is now enabled on all tables to enforce data access control.

Key RLS policies include:

```sql
-- Projects - owners can CRUD their own projects
CREATE POLICY "Owners can CRUD their projects" ON projects
  FOR ALL USING (auth.uid() = owner_id);

-- Projects - editors can read projects they are assigned to
CREATE POLICY "Editors can read their assigned projects" ON projects
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM project_editors
      WHERE project_id = projects.id AND editor_id = auth.uid()
    )
  );

-- Project editors mapping - owners can manage
CREATE POLICY "Project owners can manage project editors" ON project_editors
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM projects
      WHERE projects.id = project_editors.project_id AND projects.owner_id = auth.uid()
    )
  );
```

---

## üì¶ Data Fetching Patterns

To avoid complexity with nested relationships, we use a multi-step fetching approach:

```typescript
// Example: Fetching project details
// Step 1: Fetch basic project data
const { data: basicProject } = await supabase
  .from("projects")
  .select("*")
  .eq("id", projectId)
  .single();

// Step 2: Fetch related data (owners, editors, etc.)
const { data: editors } = await supabase
  .from("project_editors")
  .select(`
    id,
    editor_id,
    editor:users(id, name, email)
  `)
  .eq("project_id", projectId);

// Step 3: Combine the data
const project = {
  ...basicProject,
  editors: editors || []
};
```

This approach is more reliable than complex nested queries when working with Supabase.

---

## üìÅ File Uploads (Amazon S3)

- Store all files (videos, thumbnails, etc.) in S3
- Organize via folders: `uploads/{userId}/{projectId}/...`
- Use **pre-signed URLs** for secure uploads/previews
- Example upload types:
    - `raw_video`
    - `edited_video`
    - `thumbnail`

---

## üîÑ Video Upload Flow

1. User initiates upload
2. App requests a **pre-signed URL** from server
3. User uploads file directly to S3
4. App stores file metadata in `uploads` table

---

## üß† Business Logic

- Versioning handled at backend via `version_number`
- Project status transitions:
    - `pending` ‚Üí `in_review` ‚Üí `needs_changes` ‚Üí `approved`
- Editor assignment via `project_editors` table

---

## ‚úÖ Summary

- Supabase as secure backend + auth
- S3 for file storage with presigned URLs
- Strong versioning model
- Row-Level Security enabled for data protection
- Simplified data fetching with step-by-step approach
- Clear foreign key relationships between tables
